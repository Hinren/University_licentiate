// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Data;
using System.IO;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;
using SignLanguage.Models.Models;

namespace SignLanguage.ADO
{
    public partial class SignlanguageDatabaseContext : DbContext
    {
        public SignlanguageDatabaseContext()
        {
        }

        public SignlanguageDatabaseContext(DbContextOptions<SignlanguageDatabaseContext> options) : base(options)
        {
        }

        public virtual DbSet<BadMeaningWords> BadMeaningWords { get; set; }
        public virtual DbSet<GoodMeaningWords> GoodMeaningWords { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbQuery<SpModel> MySP { get; set; }
        public virtual DbQuery<Quiz> SPQuiz { get; set; }
        public virtual DbSet<UsersScoreQuiz> UsersScoreQuiz { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                //Potem oczaic czy to nie powinno brac z statup konfiguracji bo chce z json user secret
                optionsBuilder.UseSqlServer("server=PWISNIEWSKI-LAP;database=SignLanguage.Database;trusted_connection=true;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity<UsersScoreQuiz>(entity =>
            {
                entity.Property(e => e.EffectivenessInPercent).HasColumnType("decimal(3, 2)");

                entity.Property(e => e.IdUser)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<BadMeaningWords>(entity =>
            {
                entity.HasKey(e => e.IdBadMeaningWord);

                entity.Property(e => e.Meaning)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<GoodMeaningWords>(entity =>
            {
                entity.HasKey(e => e.IdGoodMeaningWord);

                entity.Property(e => e.Meaning)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.HasKey(e => e.IdUser);

                entity.Property(e => e.IdUser)
                    .HasMaxLength(150)
                    .ValueGeneratedNever();

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Login)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PasswordExpiredDate).HasColumnType("datetime");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}